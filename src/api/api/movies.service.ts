/*
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/T-Systems-MMS/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, Subject, Subscription }                 from 'rxjs';
import { catchError, takeUntil, tap, share }                 from 'rxjs/operators';

import { Movie } from '../model/movie';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for moviesDeleteMovie.
 */
export namespace MoviesDeleteMovie {
    /**
     * Parameter map for moviesDeleteMovie.
     */
    export interface PartialParamMap {
      id: string;
    }

    /**
     * Enumeration of all parameters for moviesDeleteMovie.
     */
    export enum Parameters {
      id = 'id'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of moviesDeleteMovie
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof MoviesDeleteMovie.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for moviesGetMovie.
 */
export namespace MoviesGetMovie {
    /**
     * Parameter map for moviesGetMovie.
     */
    export interface PartialParamMap {
      id: string;
    }

    /**
     * Enumeration of all parameters for moviesGetMovie.
     */
    export enum Parameters {
      id = 'id'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of moviesGetMovie
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof MoviesGetMovie.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for moviesGetMoviesPage.
 */
export namespace MoviesGetMoviesPage {
    /**
     * Parameter map for moviesGetMoviesPage.
     */
    export interface PartialParamMap {
      limit?: number;
      offset?: number;
      asc?: boolean;
    }

    /**
     * Enumeration of all parameters for moviesGetMoviesPage.
     */
    export enum Parameters {
      limit = 'limit',
      offset = 'offset',
      asc = 'asc'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of moviesGetMoviesPage
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof MoviesGetMoviesPage.PartialParamMap]?: [string, ValidatorFn][]} = {
      limit: [
      ],
      offset: [
      ],
      asc: [
      ],
    };
}

/**
 * Namespace for moviesPostMovie.
 */
export namespace MoviesPostMovie {
    /**
     * Parameter map for moviesPostMovie.
     */
    export interface PartialParamMap {
      Movie: Movie;
    }

    /**
     * Enumeration of all parameters for moviesPostMovie.
     */
    export enum Parameters {
      Movie = 'Movie'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of moviesPostMovie
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof MoviesPostMovie.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for moviesPutMovie.
 */
export namespace MoviesPutMovie {
    /**
     * Parameter map for moviesPutMovie.
     */
    export interface PartialParamMap {
      id: string;
      Movie: Movie;
    }

    /**
     * Enumeration of all parameters for moviesPutMovie.
     */
    export enum Parameters {
      id = 'id',
      Movie = 'Movie'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of moviesPutMovie
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof MoviesPutMovie.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class MoviesService {

    protected basePath = 'http://localhost:5000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    private cancelMap: {[key: string]: Subject<any>} = {};

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public moviesDeleteMovieByMap(
    map: MoviesDeleteMovie.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<Movie>;
  public moviesDeleteMovieByMap(
    map: MoviesDeleteMovie.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
  public moviesDeleteMovieByMap(
    map: MoviesDeleteMovie.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
  public moviesDeleteMovieByMap(
    map: MoviesDeleteMovie.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.moviesDeleteMovie(
      map.id,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public moviesDeleteMovie(id: string, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<Movie>;
    public moviesDeleteMovie(id: string, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
    public moviesDeleteMovie(id: string, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
    public moviesDeleteMovie(id: string, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling moviesDeleteMovie.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.delete<Movie>(`${this.configuration.basePath}/api/Movies/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['Movies_DeleteMovie']) {
                this.cancelMap['Movies_DeleteMovie'].next();
            }
            this.cancelMap['Movies_DeleteMovie'] = 'delete'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['Movies_DeleteMovie']) {
                handle = handle.pipe(takeUntil(this.cancelMap['Movies_DeleteMovie']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('Movies_DeleteMovie', 'delete'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['Movies_DeleteMovie']) {
            this.cancelMap['Movies_DeleteMovie'].complete();
            delete this.cancelMap['Movies_DeleteMovie'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'Movies_DeleteMovie',
              'delete'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'Movies_DeleteMovie')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public moviesGetMovieByMap(
    map: MoviesGetMovie.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<Movie>;
  public moviesGetMovieByMap(
    map: MoviesGetMovie.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
  public moviesGetMovieByMap(
    map: MoviesGetMovie.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
  public moviesGetMovieByMap(
    map: MoviesGetMovie.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.moviesGetMovie(
      map.id,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public moviesGetMovie(id: string, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<Movie>;
    public moviesGetMovie(id: string, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
    public moviesGetMovie(id: string, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
    public moviesGetMovie(id: string, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling moviesGetMovie.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.get<Movie>(`${this.configuration.basePath}/api/Movies/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['Movies_GetMovie']) {
                this.cancelMap['Movies_GetMovie'].next();
            }
            this.cancelMap['Movies_GetMovie'] = 'get'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['Movies_GetMovie']) {
                handle = handle.pipe(takeUntil(this.cancelMap['Movies_GetMovie']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('Movies_GetMovie', 'get'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['Movies_GetMovie']) {
            this.cancelMap['Movies_GetMovie'].complete();
            delete this.cancelMap['Movies_GetMovie'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'Movies_GetMovie',
              'get'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'Movies_GetMovie')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public moviesGetMoviesPageByMap(
    map: MoviesGetMoviesPage.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<Array<Movie>>;
  public moviesGetMoviesPageByMap(
    map: MoviesGetMoviesPage.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<Array<Movie>>>;
  public moviesGetMoviesPageByMap(
    map: MoviesGetMoviesPage.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<Array<Movie>>>;
  public moviesGetMoviesPageByMap(
    map: MoviesGetMoviesPage.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.moviesGetMoviesPage(
      map.limit,
      map.offset,
      map.asc,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * 
     * 
     * @param limit 
     * @param offset 
     * @param asc 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public moviesGetMoviesPage(limit?: number, offset?: number, asc?: boolean, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<Array<Movie>>;
    public moviesGetMoviesPage(limit?: number, offset?: number, asc?: boolean, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<Array<Movie>>>;
    public moviesGetMoviesPage(limit?: number, offset?: number, asc?: boolean, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<Array<Movie>>>;
    public moviesGetMoviesPage(limit?: number, offset?: number, asc?: boolean, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (asc !== undefined && asc !== null) {
            queryParameters = queryParameters.set('asc', <any>asc);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.get<Array<Movie>>(`${this.configuration.basePath}/api/Movies`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['Movies_GetMoviesPage']) {
                this.cancelMap['Movies_GetMoviesPage'].next();
            }
            this.cancelMap['Movies_GetMoviesPage'] = 'get'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['Movies_GetMoviesPage']) {
                handle = handle.pipe(takeUntil(this.cancelMap['Movies_GetMoviesPage']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('Movies_GetMoviesPage', 'get'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['Movies_GetMoviesPage']) {
            this.cancelMap['Movies_GetMoviesPage'].complete();
            delete this.cancelMap['Movies_GetMoviesPage'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'Movies_GetMoviesPage',
              'get'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'Movies_GetMoviesPage')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public moviesPostMovieByMap(
    map: MoviesPostMovie.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<Movie>;
  public moviesPostMovieByMap(
    map: MoviesPostMovie.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
  public moviesPostMovieByMap(
    map: MoviesPostMovie.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
  public moviesPostMovieByMap(
    map: MoviesPostMovie.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.moviesPostMovie(
      map.Movie,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * 
     * 
     * @param Movie 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public moviesPostMovie(Movie: Movie, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<Movie>;
    public moviesPostMovie(Movie: Movie, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<Movie>>;
    public moviesPostMovie(Movie: Movie, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<Movie>>;
    public moviesPostMovie(Movie: Movie, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (Movie === null || Movie === undefined) {
            throw new Error('Required parameter Movie was null or undefined when calling moviesPostMovie.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.post<Movie>(`${this.configuration.basePath}/api/Movies`,
            Movie,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['Movies_PostMovie']) {
                this.cancelMap['Movies_PostMovie'].next();
            }
            this.cancelMap['Movies_PostMovie'] = 'post'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['Movies_PostMovie']) {
                handle = handle.pipe(takeUntil(this.cancelMap['Movies_PostMovie']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('Movies_PostMovie', 'post'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['Movies_PostMovie']) {
            this.cancelMap['Movies_PostMovie'].complete();
            delete this.cancelMap['Movies_PostMovie'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'Movies_PostMovie',
              'post'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'Movies_PostMovie')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public moviesPutMovieByMap(
    map: MoviesPutMovie.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<Blob>;
  public moviesPutMovieByMap(
    map: MoviesPutMovie.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<Blob>>;
  public moviesPutMovieByMap(
    map: MoviesPutMovie.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<Blob>>;
  public moviesPutMovieByMap(
    map: MoviesPutMovie.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.moviesPutMovie(
      map.id,
      map.Movie,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * 
     * 
     * @param id 
     * @param Movie 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public moviesPutMovie(id: string, Movie: Movie, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<Blob>;
    public moviesPutMovie(id: string, Movie: Movie, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<Blob>>;
    public moviesPutMovie(id: string, Movie: Movie, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<Blob>>;
    public moviesPutMovie(id: string, Movie: Movie, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling moviesPutMovie.');
        }
        if (Movie === null || Movie === undefined) {
            throw new Error('Required parameter Movie was null or undefined when calling moviesPutMovie.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.put(`${this.configuration.basePath}/api/Movies/${encodeURIComponent(String(id))}`,
            Movie,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['Movies_PutMovie']) {
                this.cancelMap['Movies_PutMovie'].next();
            }
            this.cancelMap['Movies_PutMovie'] = 'put'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['Movies_PutMovie']) {
                handle = handle.pipe(takeUntil(this.cancelMap['Movies_PutMovie']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('Movies_PutMovie', 'put'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['Movies_PutMovie']) {
            this.cancelMap['Movies_PutMovie'].complete();
            delete this.cancelMap['Movies_PutMovie'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'Movies_PutMovie',
              'put'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'Movies_PutMovie')));
        }
        return handle;
    }

}

export namespace MoviesService {
  export enum Operations {
    Movies_DeleteMovie = 'Movies_DeleteMovie',
    Movies_GetMovie = 'Movies_GetMovie',
    Movies_GetMoviesPage = 'Movies_GetMoviesPage',
    Movies_PostMovie = 'Movies_PostMovie',
    Movies_PutMovie = 'Movies_PutMovie'
  }
}
